popup_dat3 <- paste0("<strong>County: </strong>",
leafmap3$NAME,
"<br><strong>Fast-food restaurants, 2014 : </strong>",
leafmap3$FFR14_chr)
pal <- colorQuantile("Spectral", NULL, n = 10)
leaflet(data = leafmap3) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(FFR14),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat3)
library(shiny); runApp('wei_xian.R')
runApp('wei_xian.R')
runApp('wei_xian.R')
runApp('wei_xian.R')
library(shiny); runApp('wei_xian.R')
popup_dat2 <- paste0("<strong>State: </strong>",
leafmap2$STATE_NAME,
"<br><strong>State Population, 2009 : </strong>",
leafmap2$popu)
pal <- colorNumeric("Spectral", NULL, n = 13)
leaflet(data = leafmap2) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(population),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat2) %>%
addLegend("bottomright", pal = pal, values = ~population,
title = "State Population, 2009",
opacity = 1 )
library(tidyverse)
library(readxl)
library(leaflet) # Plot maps
library(rgdal)
popup_dat2 <- paste0("<strong>State: </strong>",
leafmap2$STATE_NAME,
"<br><strong>State Population, 2009 : </strong>",
leafmap2$popu)
pal <- colorNumeric("Spectral", NULL, n = 13)
leaflet(data = leafmap2) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(population),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat2) %>%
addLegend("bottomright", pal = pal, values = ~population,
title = "State Population, 2009",
opacity = 1 )
runApp('wei_xian.R')
shiny::runApp('app')
runApp('app')
runApp('wei_xian.R')
View(df)
runApp('app')
View(df_LOCAL)
runApp('app')
runApp('app')
View(pal)
View(pal)
runApp('app')
runApp('app')
runApp('app')
##################################################
## Project: Food Environment Atlas
## Script purpose:
##  - Group project for WQD7001 - Principle Data Science
## Date: 2019/05/13
## Author: Aswadi, Wei Xian, Peng Hor, Bing Shien
##################################################
library(shiny)
library(shinyjs)
library(tidyverse)
library(leaflet) # Plot maps
library(readxl)
library(rgdal)
#### PART-1: READING RAW-DATA ####
df <- read_excel("../input/DataDownload - Copy.xlsx", 2)
worksheet <- df %>% distinct(`Category Code`) %>% pull(`Category Code`)
for (sheets in worksheet){
# df_name <- paste('df',sheets,sep='_')
# print(df_name)
assign(paste('df',sheets,sep='_'), read_excel("../input/DataDownload - Copy.xlsx", sheet = sheets))
}
ls(pattern = "df_[A-Z]*")
df_list <- mget(x = ls(pattern = "df_[A-Z]*"))
# state_data <- read_excel("input/DataDownload - Copy.xlsx", 4)
# US MAP - COUNTIES
us.map.county <- readOGR(dsn= '../input/UScounties', layer = "UScounties", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATE_FIPS %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATE_FIPS %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
#### PART-2: GENERATE Var-Lists (fixed through run-time) ####
varCategory <- df %>% distinct(`Category Name`) %>% pull(`Category Name`)
varStates <- df_LOCAL %>% distinct(State) %>% pull(State)
varStatesName <- setNames(state.name,state.abb)[varStates]
## NWX: exclude "DC", not in the list state.name
varStatesName <- setNames(state.name,state.abb)[varStates[varStates!="DC"]]
varStatesName <- state.name[match(state.abb,varStates[varStates!="DC"])]
## GET variables for each Category
varLOCAL <- df %>% group_by(`Category Code`) %>% filter(`Category Code`=="LOCAL") %>% distinct(`Variable Name`) %>% pull(`Variable Name`)
varLOCAL_Code <- df %>% group_by(`Category Code`) %>% filter(`Category Code`=="LOCAL") %>% distinct(`Variable Code`) %>% pull(`Variable Code`)
ui <- fluidPage(
headerPanel("Food Environment Atlas in the US"),
br(),br(),
sidebarLayout(
position = "left",
sidebarPanel = sidebarPanel(
"Please select options:",
br(),br(),
textInput(inputId = "txtInput1", label = "TMP Text Input", value = "Enter text..."),
#selectInput(inputId = "Category", "Category:", choices = c("mpg","cyl"),selected = NULL, multiple = FALSE),
selectInput(inputId = "inCategory", "Category:", choices = varCategory, selected = "Local Foods", multiple = FALSE),
selectInput(inputId = "inState", "State:", choices = varStatesName, selected = "Virginia", multiple = FALSE),
uiOutput("in2County"), #renderUI, based on State
uiOutput("in2Indicator"), #renderUI, based on Category
br(),
wellPanel(
#h3("This is", strong("INFO"),"label"),
#br(),
#p("Line1"),
#p("Line2"),
#p("Selected Category:", input$Category),
#br()
"Selected Category:", textOutput(outputId = "infoCategory"), br(),
"Selected State:", textOutput(outputId = "infoState"), br(),
"Selected County:", textOutput(outputId = "infoCounty"), br(),
"Selected Indicator:", textOutput(outputId = "infoIndicator")
)
),
mainPanel(
tabsetPanel(
id="tabs",
# Aswadi
tabPanel("Interactive Maps", "This is an interactive Map"),
leafletOutput("mymap"),# create leaflet map output
h2("Second level title"),
br(),
h2("third level title"),
# WeiXin
tabPanel(
title = "County-Infos",
h3(textOutput(outputId = "tab2selectedCounty")), # Show selected County / State
p(textOutput(outputId = "tab2selectedCategory")), # Show selected Category
tableOutput(outputId = "tab2table")
),
# BingShien
tabPanel("Key Indicator", "Infos by key indicator")
)
)
)
)
server <- function(input, output, session) {
output$in2County <- renderUI(
selectInput(inputId = "inCounty", label = "County:", choices = df_LOCAL$County[df_LOCAL$State==state.abb[which(state.name==input$inState)]], selected = NULL, multiple = FALSE)
)
output$in2Indicator <- renderUI(
selectInput(inputId = "inIndicator", label = "Indicator:", choices = df$`Variable Name`[df$`Category Name`==input$inCategory], selected = NULL, multiple = FALSE)
)
output$infoCategory <- renderText(input$inCategory)
output$infoState <- renderText(input$inState)
output$infoCounty <- renderText(input$inCounty)
output$infoIndicator <- renderText(input$inIndicator)
# NWX: TAB-2
observe({
if(input$tabs == "County-Infos"){
output$tab2selectedCounty <- renderText(paste("Infos by County:", input$inCounty, "in", input$inState))
output$tab2selectedCategory <- renderText(paste("Selected Category:", input$inCategory))
countyInfo <- df_LOCAL %>% filter(County==input$inCounty) %>% t()
countyRownames <- df$`Variable Name`[df$`Variable Code` %in% row.names(countyInfo)]
## Test2 Beginn
# 100
#countyTMP1 <- df_LOCAL %>% filter(County=="Accomack") %>% t()
countyTMP1 <- df_LOCAL %>% filter(County==input$inCounty) %>% t()
rnameTMP1 <- row.names(countyTMP1)
# 97
rCodeTMP1_Avai <- df$`Variable Code`[df$`Variable Code` %in% rnameTMP1]
rnameTMP1_Avai <- df$`Variable Name`[df$`Variable Code` %in% rnameTMP1]
rUnitTMP1_Avai <- df$Units[df$`Variable Code` %in% rnameTMP1]
# cbind
tmpTbl1 <- cbind(countyTMP1,rnameTMP1)
colnames(tmpTbl1) <- c("Value","Code")
tmpTbl2 <- cbind(rCodeTMP1_Avai,rnameTMP1_Avai,rUnitTMP1_Avai)
colnames(tmpTbl2) <- c("Code","Name","Units")
merge(tmpTbl1,tmpTbl2,by="Code")
# Get FINAL table
countyInfo <- cbind(tmpFinal["Name"],tmpFinal["Value"],tmpFinal["Units"])
## Test2 END
# Get complete table, including state/fips/county, extract row names, cbind (with row names / units), then only filter.
#myTmp <- cbind(rowNames2,countyInfo[rowNames2,])
#colnames(myTmp) <- c("VarName","Value")
#myRowCode <- df$`Variable Code`[df$`Variable Code` %in% row.names(countyInfo)]
#myRowNames <- df$`Variable Name`[df$`Variable Code` %in% row.names(countyInfo)]
output$tab2table <- renderTable(
countyInfo,colnames = TRUE)
} else {
output$tab2selectedCounty <- renderText("NOTHING")
output$tab2selectedCategory <- renderText("NOTHING")
}
})
#output$tab2table <- renderTable(
#countyInfo <- df_LOCAL %>% filter(County==input$inCounty) %>% t(),
#rownames = TRUE,
#rownames <- df$`Variable Name`[df$`Variable Code` %in% row.names()],
#colnames = TRUE
#)
# hiding or showing element, not yet correct
observeEvent(input$inState, {
if (input$inState == "Virginia"){
#shinyjs::hide(input$inIndicator)
shinyjs::hide(id="myID")
}else{
#shinyjs::hide(input$inIndicator)
shinyjs::hide(id="myID")
}
})
# using leaflet
output$mymap <- renderLeaflet({
# leaflet(data = leafmap2) %>%
#   addTiles() %>%
#   addPolygons(fillColor = ~pal(population),
#               fillOpacity = 0.8,
#               color = "#BDBDC3",
#               weight = 1,
#               popup = popup_dat2) %>%
#   addLegend("bottomright", pal = pal, values = ~population,
#             title = "State Population, 2009",
#             opacity = 1 )
#county
# leafmap3 <- merge(us.map.county, test_county_data, by.x= 'FIPS', by.y='FIPS')
#
# popup_dat3 <- paste0("<strong>County: </strong>",
#                      leafmap3$NAME,
#                      "<br><strong>Fast-food restaurants, 2014 : </strong>",
#                      leafmap3$FFR14_chr)
# pal <- colorQuantile("Spectral", NULL, n = 10)
# leaflet(data = leafmap3) %>%
#   addTiles() %>%
#   addPolygons(fillColor = ~pal(FFR14),
#               fillOpacity = 0.8,
#               color = "#BDBDC3",
#               weight = 1,
#               popup = popup_dat3) #%>%
# addLegend("bottomright", pal = pal, values = ~population,
#           title = "State Population, 2009",
#           opacity = 1 )
# print('indicator:',input$inIndicator)
# print(paste0("test1: ", df$`Category Code`[df$`Category Name`==input$inCategory] %>% distinct(`Category Code`)))
# print(paste0("df_", filter(df,`Category Name`==input$inCategory) %>% distinct(`Category Code`)))
# print(paste0(filter(df,`Variable Name`==input$inIndicator) %>% distinct(`Variable Name`)))
# print(paste0(df$`Variable Code`[df$`Variable Name`==input$inIndicator]))
# print(paste0("df_", filter(df,`Category Name`==input$inCategory) %>% distinct(`Category Code`)))
test_county_data <- df_list[[paste0("df_", filter(df,`Category Name`==input$inCategory) %>% distinct(`Category Code`))]]
# head(test_county_data)
# test_county_data <- paste0("df_", filter(df,`Category Name`==input$inCategory) %>% distinct(`Category Code`))
temp_df <- select(test_county_data,FIPS,paste0(df$`Variable Code`[df$`Variable Name`==input$inIndicator]))
names(temp_df) <- c("FIPS", "variable")
leafmap3 <- merge(us.map.county, temp_df, by.x= 'FIPS', by.y='FIPS')
popup_dat3 <- paste0("<strong>County: </strong>",
leafmap3$NAME,
"<br><strong>",paste0(filter(df,`Variable Name`==input$inIndicator) %>% distinct(`Variable Name`))," : </strong>",
# as.character(test_county_data$DIRSALES_FARMS07))
as.character(temp_df$variable))
pal <- colorQuantile("Spectral", NULL, n = 10)
leaflet(data = leafmap3) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(variable),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat3)
})
}
shinyApp(ui, server)
runApp('app')
# test for county
test_county_data <- select(df_RESTAURANTS,FIPS,FFR14) %>% mutate(FFR14_chr=as.character(FFR14))
leafmap3 <- merge(us.map.county, test_county_data, by.x= 'FIPS', by.y='FIPS')
popup_dat3 <- paste0("<strong>County: </strong>",
leafmap3$NAME,
"<br><strong>Fast-food restaurants, 2014 : </strong>",
leafmap3$FFR14_chr)
pal <- colorQuantile("Spectral", NULL, n = 10)
leaflet(data = leafmap3) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(FFR14),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat3)
test_state_data <- select(state_data[complete.cases(state_data), ],StateFIPS,'State Population, 2009') %>% mutate(popu=as.character(`State Population, 2009`))
names(test_state_data)[2] <- 'population'
leafmap2 <- merge(us.map.state, test_state_data, by.x= 'STATE_FIPS', by.y='StateFIPS')
popup_dat2 <- paste0("<strong>State: </strong>",
leafmap2$STATE_NAME,
"<br><strong>State Population, 2009 : </strong>",
leafmap2$popu)
pal <- colorNumeric("Spectral", NULL, n = 13)
leaflet(data = leafmap2) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(population),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat2) %>%
addLegend("bottomright", pal = pal, values = ~population,
title = "State Population, 2009",
opacity = 1 )
runApp('app')
runApp('app')
##################################################
## Project: Food Environment Atlas
## Script purpose:
##  - Group project for WQD7001 - Principle Data Science
## Date: 2019/05/13
## Author: Aswadi, Wei Xian, Peng Hor, Bing Shien
##################################################
library(shiny)
library(shinyjs)
library(tidyverse)
library(leaflet) # Plot maps
library(readxl)
library(rgdal)
#### PART-1: READING RAW-DATA ####
df <- read_excel("input/DataDownload - Copy.xlsx", 2)
worksheet <- df %>% distinct(`Category Code`) %>% pull(`Category Code`)
for (sheets in worksheet){
# df_name <- paste('df',sheets,sep='_')
# print(df_name)
assign(paste('df',sheets,sep='_'), read_excel("input/DataDownload - Copy.xlsx", sheet = sheets))
}
# state_data <- read_excel("input/DataDownload - Copy.xlsx", 4)
# US MAP - COUNTIES
us.map.county <- readOGR(dsn= 'input/UScounties', layer = "UScounties", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATE_FIPS %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATE_FIPS %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
#### PART-2: GENERATE Var-Lists (fixed through run-time) ####
varCategory <- df %>% distinct(`Category Name`) %>% pull(`Category Name`)
varStates <- df_LOCAL %>% distinct(State) %>% pull(State)
varStatesName <- setNames(state.name,state.abb)[varStates]
## NWX: exclude "DC", not in the list state.name
varStatesName <- setNames(state.name,state.abb)[varStates[varStates!="DC"]]
varStatesName <- state.name[match(state.abb,varStates[varStates!="DC"])]
## GET variables for each Category
varLOCAL <- df %>% group_by(`Category Code`) %>% filter(`Category Code`=="LOCAL") %>% distinct(`Variable Name`) %>% pull(`Variable Name`)
varLOCAL_Code <- df %>% group_by(`Category Code`) %>% filter(`Category Code`=="LOCAL") %>% distinct(`Variable Code`) %>% pull(`Variable Code`)
ui <- fluidPage(
headerPanel("Food Environment Atlas in the US"),
br(),br(),
sidebarLayout(
position = "left",
sidebarPanel = sidebarPanel(
"Please select options:",
br(),br(),
textInput(inputId = "txtInput1", label = "TMP Text Input", value = "Enter text..."),
#selectInput(inputId = "Category", "Category:", choices = c("mpg","cyl"),selected = NULL, multiple = FALSE),
selectInput(inputId = "inCategory", "Category:", choices = varCategory, selected = "Local Foods", multiple = FALSE),
selectInput(inputId = "inState", "State:", choices = varStatesName, selected = "Virginia", multiple = FALSE),
uiOutput("in2County"), #renderUI, based on State
uiOutput("in2Indicator"), #renderUI, based on Category
br(),
wellPanel(
#h3("This is", strong("INFO"),"label"),
#br(),
#p("Line1"),
#p("Line2"),
#p("Selected Category:", input$Category),
#br()
"Selected Category:", textOutput(outputId = "infoCategory"), br(),
"Selected State:", textOutput(outputId = "infoState"), br(),
"Selected County:", textOutput(outputId = "infoCounty"), br(),
"Selected Indicator:", textOutput(outputId = "infoIndicator")
)
),
mainPanel(
tabsetPanel(
id="tabs",
# Aswadi
tabPanel("Interactive Maps", "This is an interactive Map"),
leafletOutput("mymap"),# create leaflet map output
# WeiXin
tabPanel(
title = "County-Infos",
h3(textOutput(outputId = "tab2selectedCounty")), # Show selected County / State
p(textOutput(outputId = "tab2selectedCategory")), # Show selected Category
tableOutput(outputId = "tab2table")
),
# BingShien
tabPanel("Key Indicator", "Infos by key indicator")
)
)
)
)
server <- function(input, output, session) {
output$in2County <- renderUI(
selectInput(inputId = "inCounty", label = "County:", choices = df_LOCAL$County[df_LOCAL$State==state.abb[which(state.name==input$inState)]], selected = NULL, multiple = FALSE)
)
output$in2Indicator <- renderUI(
selectInput(inputId = "inIndicator", label = "Indicator:", choices = df$`Variable Name`[df$`Category Name`==input$inCategory], selected = NULL, multiple = FALSE)
)
output$infoCategory <- renderText(input$inCategory)
output$infoState <- renderText(input$inState)
output$infoCounty <- renderText(input$inCounty)
output$infoIndicator <- renderText(input$inIndicator)
# NWX: TAB-2
observe({
if(input$tabs == "County-Infos"){
output$tab2selectedCounty <- renderText(paste("Infos by County:", input$inCounty, "in", input$inState))
output$tab2selectedCategory <- renderText(paste("Selected Category:", input$inCategory))
countyInfo <- df_LOCAL %>% filter(County==input$inCounty) %>% t()
countyRownames <- df$`Variable Name`[df$`Variable Code` %in% row.names(countyInfo)]
## Test2 Beginn
# 100
#countyTMP1 <- df_LOCAL %>% filter(County=="Accomack") %>% t()
countyTMP1 <- df_LOCAL %>% filter(County==input$inCounty) %>% t()
rnameTMP1 <- row.names(countyTMP1)
# 97
rCodeTMP1_Avai <- df$`Variable Code`[df$`Variable Code` %in% rnameTMP1]
rnameTMP1_Avai <- df$`Variable Name`[df$`Variable Code` %in% rnameTMP1]
rUnitTMP1_Avai <- df$Units[df$`Variable Code` %in% rnameTMP1]
# cbind
tmpTbl1 <- cbind(countyTMP1,rnameTMP1)
colnames(tmpTbl1) <- c("Value","Code")
tmpTbl2 <- cbind(rCodeTMP1_Avai,rnameTMP1_Avai,rUnitTMP1_Avai)
colnames(tmpTbl2) <- c("Code","Name","Units")
merge(tmpTbl1,tmpTbl2,by="Code")
# Get FINAL table
countyInfo <- cbind(tmpFinal["Name"],tmpFinal["Value"],tmpFinal["Units"])
## Test2 END
# Get complete table, including state/fips/county, extract row names, cbind (with row names / units), then only filter.
#myTmp <- cbind(rowNames2,countyInfo[rowNames2,])
#colnames(myTmp) <- c("VarName","Value")
#myRowCode <- df$`Variable Code`[df$`Variable Code` %in% row.names(countyInfo)]
#myRowNames <- df$`Variable Name`[df$`Variable Code` %in% row.names(countyInfo)]
output$tab2table <- renderTable(
countyInfo,colnames = TRUE)
} else {
output$tab2selectedCounty <- renderText("NOTHING")
output$tab2selectedCategory <- renderText("NOTHING")
}
})
#output$tab2table <- renderTable(
#countyInfo <- df_LOCAL %>% filter(County==input$inCounty) %>% t(),
#rownames = TRUE,
#rownames <- df$`Variable Name`[df$`Variable Code` %in% row.names()],
#colnames = TRUE
#)
# hiding or showing element, not yet correct
observeEvent(input$inState, {
if (input$inState == "Virginia"){
#shinyjs::hide(input$inIndicator)
shinyjs::hide(id="myID")
}else{
#shinyjs::hide(input$inIndicator)
shinyjs::hide(id="myID")
}
})
# using leaflet
output$mymap <- renderLeaflet({
# leaflet(data = leafmap2) %>%
#   addTiles() %>%
#   addPolygons(fillColor = ~pal(population),
#               fillOpacity = 0.8,
#               color = "#BDBDC3",
#               weight = 1,
#               popup = popup_dat2) %>%
#   addLegend("bottomright", pal = pal, values = ~population,
#             title = "State Population, 2009",
#             opacity = 1 )
#county
leaflet(data = leafmap3) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(FFR14),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat3) %>%
addLegend("bottomright", pal = pal, values = ~population,
title = "State Population, 2009",
opacity = 1 )
})
}
shinyApp(ui, server)
runApp('app')
shiny::runApp('app')
runApp('tmp_Shiny_Exercise.R')
runApp('tmp_Shiny_Exercise.R')
runApp('tmp_Shiny_Exercise.R')
runApp('tmp_Shiny_Exercise.R')
runApp('tmp_Shiny_Exercise.R')
rlang::last_error()
traceback()
runApp('tmp_Shiny_Exercise.R')
install.packages("openssl")
runApp('tmp_Shiny_Exercise.R')
df <- read_excel("input/DataDownload.xls", 2)
worksheet <- df %>% distinct(`Category Code`) %>% pull(`Category Code`)
for (sheets in worksheet){
assign(paste("df", sheets, sep = "_"), read_excel("input/DataDownload.xls", sheet = sheets))
}
# US MAP - COUNTIES
us.map.county <- readOGR(dsn= 'input/UScounties', layer = "UScounties", stringsAsFactors = FALSE)
runApp('tmp_Shiny_Exercise.R')
runApp('app')
rsconnect::setAccountInfo(name='aswadi', token='7A17B71B86AF7BD28B1FE7190944579E', secret='/7h3UXWP7KER4W403SBQsnJoFQkJTuJ/igpRsbUj')
runApp('app')
runApp()
